{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook,\n    TableName: string,\n    PrimaryKeyColumnName: string,\n    DeleteData: deletedata[],\n) {\n    let table = workbook.getTable(TableName);\n    let RowNum: number;\n    let TableRange = table.getRange();\n    let TableData = TableRange.getValues();\n    let ArrayPK = table.getColumn(PrimaryKeyColumnName).getRange().getValues().join(\"#|#\").split(\"#|#\");\n    let ColumnCount = TableRange.getColumnCount();\n    let InitialRowCount = TableRange.getRowCount();\n    let TableSize = InitialRowCount * ColumnCount;\n\n    console.log(`Starting table size is ${TableSize} cells.`);\n\n    //Create a blank row at the end of the table to copy into each deletion row\n    table.addRow();\n    let TableRange2 = table.getRange()\n    let EndTableBlankRow = TableRange2.getRow(TableRange2.getRowCount() - 1)\n    let EndTableBlankRowPK = table.getColumnByName(PrimaryKeyColumnName).getRange().getRow(TableRange2.getRowCount() - 1).getValue()\n\n    // Update tag deletion items row by row if the table is too large for the V2 batch update\n    //Iterate through each object item in the array from the flow\n    for (let i = 0; i < DeleteData.length; i++) {\n        //Get the row number for the line to update by matching the foreign key from the other datasource to the primary key in Excel\n        RowNum = ArrayPK.indexOf(DeleteData[i].PK);\n        //Set each deletion row to blank. Can not directly delete the row in this step as that causes the index of all the other deletion rows to change.\n        TableRange.getRow(RowNum).copyFrom(EndTableBlankRow, ExcelScript.RangeCopyType.values)\n    }\n    //RemoveDuplicates on all columns to remove the identical blank records\n    table.resize(TableRange.getAbsoluteResizedRange(table.getRange().removeDuplicates([0, ColumnCount - 1], false).getUniqueRemaining(), ColumnCount));\n\n    //Refresh after deletion index changes\n    ArrayPK = table.getColumn(PrimaryKeyColumnName).getRange().getValues().join(\"#|#\").split(\"#|#\");\n    let LastBlank = ArrayPK.indexOf(String(EndTableBlankRowPK));\n    let FinalRowCount = workbook.getTable(TableName).getRange().getRowCount().valueOf();\n    let RowsDeleted = InitialRowCount - FinalRowCount;\n    if (LastBlank > 1 || FinalRowCount > 2) {\n        //Delete the last blank row that wasn't removed by the duplicates function\t\n        table.deleteRowsAt((LastBlank - 1), 1);\n    }\n    //If the deletion runs against the top of the table adjust the count to avoid a false negative error\n    if (FinalRowCount = 2) { RowsDeleted = RowsDeleted + 1 };\n\n    console.log(`Number of Rows Deleted: ${RowsDeleted} (Number of rows deleted is also provided as the result value)`);\n    console.log(`Initial Row Count: ${InitialRowCount}`);\n    console.log(`Final Row Count: ${workbook.getTable(TableName).getRange().getRowCount().valueOf()}`);\n    console.log(`Final Table Size: ${workbook.getTable(TableName).getRange().getRowCount().valueOf() * ColumnCount} cells`);\n    return RowsDeleted\n}\n\ninterface deletedata {\n    'PK': (string | undefined)\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[{\"name\":\"TableName\",\"index\":0},{\"name\":\"PrimaryKeyColumnName\",\"index\":1},{\"name\":\"DeleteData\",\"index\":2}],\"parameterSchema\":{\"type\":\"object\",\"required\":[\"TableName\",\"PrimaryKeyColumnName\",\"DeleteData\"],\"properties\":{\"TableName\":{\"type\":\"string\"},\"PrimaryKeyColumnName\":{\"type\":\"string\"},\"DeleteData\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"PK\":{\"type\":\"string\"}}}}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"number\"}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}